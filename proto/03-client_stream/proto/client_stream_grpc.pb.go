// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: client_stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamClient_Route_FullMethodName     = "/proto.StreamClient/Route"
	StreamClient_RouteList_FullMethodName = "/proto.StreamClient/RouteList"
)

// StreamClientClient is the client API for StreamClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义我们的服务（可定义多个服务,每个服务可定义多个接口）
type StreamClientClient interface {
	Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// 客户端流式rpc，在请求的参数前添加stream
	RouteList(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamRequest, SimpleResponse], error)
}

type streamClientClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClientClient(cc grpc.ClientConnInterface) StreamClientClient {
	return &streamClientClient{cc}
}

func (c *streamClientClient) Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, StreamClient_Route_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClientClient) RouteList(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamRequest, SimpleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamClient_ServiceDesc.Streams[0], StreamClient_RouteList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, SimpleResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamClient_RouteListClient = grpc.ClientStreamingClient[StreamRequest, SimpleResponse]

// StreamClientServer is the server API for StreamClient service.
// All implementations must embed UnimplementedStreamClientServer
// for forward compatibility.
//
// 定义我们的服务（可定义多个服务,每个服务可定义多个接口）
type StreamClientServer interface {
	Route(context.Context, *SimpleRequest) (*SimpleResponse, error)
	// 客户端流式rpc，在请求的参数前添加stream
	RouteList(grpc.ClientStreamingServer[StreamRequest, SimpleResponse]) error
	mustEmbedUnimplementedStreamClientServer()
}

// UnimplementedStreamClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamClientServer struct{}

func (UnimplementedStreamClientServer) Route(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (UnimplementedStreamClientServer) RouteList(grpc.ClientStreamingServer[StreamRequest, SimpleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RouteList not implemented")
}
func (UnimplementedStreamClientServer) mustEmbedUnimplementedStreamClientServer() {}
func (UnimplementedStreamClientServer) testEmbeddedByValue()                      {}

// UnsafeStreamClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamClientServer will
// result in compilation errors.
type UnsafeStreamClientServer interface {
	mustEmbedUnimplementedStreamClientServer()
}

func RegisterStreamClientServer(s grpc.ServiceRegistrar, srv StreamClientServer) {
	// If the following call pancis, it indicates UnimplementedStreamClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamClient_ServiceDesc, srv)
}

func _StreamClient_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamClientServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamClient_Route_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamClientServer).Route(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamClient_RouteList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamClientServer).RouteList(&grpc.GenericServerStream[StreamRequest, SimpleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamClient_RouteListServer = grpc.ClientStreamingServer[StreamRequest, SimpleResponse]

// StreamClient_ServiceDesc is the grpc.ServiceDesc for StreamClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StreamClient",
	HandlerType: (*StreamClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Route",
			Handler:    _StreamClient_Route_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteList",
			Handler:       _StreamClient_RouteList_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "client_stream.proto",
}
